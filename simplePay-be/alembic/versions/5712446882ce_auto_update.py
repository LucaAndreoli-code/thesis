"""Auto update

Revision ID: 5712446882ce
Revises: 596ea7e08a8f
Create Date: 2025-08-28 12:06:25.798357

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5712446882ce'
down_revision: Union[str, None] = '596ea7e08a8f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_types')
    op.drop_table('notifications')
    op.alter_column('transactions', 'from_wallet_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('transactions', 'to_wallet_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('transactions', 'currency',
               existing_type=sa.VARCHAR(length=3),
               nullable=True)
    op.alter_column('transactions', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('transactions', 'reference_code',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('transactions', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint(op.f('transactions_reference_code_key'), 'transactions', type_='unique')
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_reference_code'), 'transactions', ['reference_code'], unique=True)
    op.drop_column('transactions', 'transaction_type')
    op.drop_column('transactions', 'fee_amount')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'address')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'birth_date')
    op.alter_column('wallets', 'wallet_number',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('wallets', 'balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=True)
    op.alter_column('wallets', 'currency',
               existing_type=sa.VARCHAR(length=3),
               nullable=True)
    op.alter_column('wallets', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('wallets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('wallets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint(op.f('wallets_wallet_number_key'), 'wallets', type_='unique')
    op.create_index(op.f('ix_wallets_id'), 'wallets', ['id'], unique=False)
    op.create_index(op.f('ix_wallets_wallet_number'), 'wallets', ['wallet_number'], unique=True)
    op.drop_column('wallets', 'available_balance')
    op.drop_column('wallets', 'wallet_type')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('wallets', sa.Column('wallet_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('wallets', sa.Column('available_balance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_wallets_wallet_number'), table_name='wallets')
    op.drop_index(op.f('ix_wallets_id'), table_name='wallets')
    op.create_unique_constraint(op.f('wallets_wallet_number_key'), 'wallets', ['wallet_number'], postgresql_nulls_not_distinct=False)
    op.alter_column('wallets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('wallets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('wallets', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('wallets', 'currency',
               existing_type=sa.VARCHAR(length=3),
               nullable=False)
    op.alter_column('wallets', 'balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=False)
    op.alter_column('wallets', 'wallet_number',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.add_column('users', sa.Column('birth_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('transactions', sa.Column('fee_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False))
    op.add_column('transactions', sa.Column('transaction_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_transactions_reference_code'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.create_unique_constraint(op.f('transactions_reference_code_key'), 'transactions', ['reference_code'], postgresql_nulls_not_distinct=False)
    op.alter_column('transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('transactions', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('transactions', 'reference_code',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('transactions', 'description',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('transactions', 'currency',
               existing_type=sa.VARCHAR(length=3),
               nullable=False)
    op.alter_column('transactions', 'to_wallet_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('transactions', 'from_wallet_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name=op.f('notifications_transaction_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_table('transaction_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('type_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fee_percentage', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=False),
    sa.Column('min_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_types_pkey')),
    sa.UniqueConstraint('type_code', name=op.f('transaction_types_type_code_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
